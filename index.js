require('dotenv').config();
const { Bot } = require('grammy');
const citiesData = require('./cities.json');
const { updateJoinTimer } = require('./join_updater');
const keep_alive = require('./keep_alive');

const bot = new Bot(process.env.BOT_TOKEN, { users: true });

const activePlayers = new Set();
const userInfo = {};
const playerScores = {};
const MAX_SCORE = 15;
const notifiedPlayers = new Set();

let isGameActive = false;
let gameEndMessageSent = false;
let joinPhase = false;
let joinTimer = null;
let currentCity = '';
let usedCities = new Set();

bot.command('help', ctx => {
	const helpMessage = `
	–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ì–æ—Ä–æ–¥–∞" üåÉ!

	–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üîó:
	/start -- –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
	/join -- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
	/help -- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

	–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ‚òïÔ∏è:
	1. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞.
	2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –Ω–∞–∑–≤–∞–Ω—ã.
	3. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ -- 15 (–ö–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞—é —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–º).
	4. –ù–∞–∑—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞.

	–£–¥–∞—á–∏ –∏ –≤–µ—Å–µ–ª–æ–π –∏–≥—Ä—ã! üç™`;

	ctx.reply(helpMessage);
});

bot.command('start', async ctx => {
	isGameActive = true;
	gameEndMessageSent = false;
	currentCity = '';
	usedCities.clear();
	activePlayers.clear();
	Object.keys(playerScores).forEach(key => delete playerScores[key]);

	const message =
		'–ò–≥—Ä–∞ –≤ "–ì–æ—Ä–æ–¥–∞" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è';
	const sentMessage = await ctx.reply(message);
	const endTime = Date.now() + 60000;

	updateJoinTimer(ctx.api, sentMessage, message, endTime);

	joinPhase = true;
	notifiedPlayers.clear();

	joinTimer = setTimeout(() => {
		joinPhase = false;
		isGameActive = activePlayers.size > 0;
		ctx.reply(
			isGameActive
				? '–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!'
				: '–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
		);
	}, 60000);
});

bot.command('join', ctx => {
	const userId = ctx.from.id;
	const username = ctx.from.username || ctx.from.first_name;

	if (isGameActive && joinTimer) {
		activePlayers.add(userId);
		userInfo[userId] = username;
		playerScores[userId] = 0;
		ctx.reply(`${username}, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!`);
	} else if (!joinTimer) {
		ctx.reply('–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
	} else {
		ctx.reply('–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥—ã /start');
	}
});

function cityExists(cityName) {
	return citiesData.city.some(
		cityObj => cityObj.name.toLowerCase() === cityName.toLowerCase()
	);
}

function getLastSignificantLetter(city) {
	const reversedCity = city.split('').reverse();

	for (let letter of reversedCity) {
		if (letter !== '—å' && letter !== '—ä') {
			return letter;
		}
	}

	return city[0];
}

function checkGameEnd(ctx) {
	const userId = ctx.from.id;
	const currentScore = Number(playerScores[userId]) || 0;

	if (currentScore >= MAX_SCORE && !gameEndMessageSent) {
		const leaderboard = Object.entries(playerScores)
			.sort(([, a], [, b]) => b - a)
			.map(([id, score], index) => {
				const username = userInfo[id] || '–ê–Ω–æ–Ω–∏–º';
				return `${index + 1}. ${username}: ${score} –æ—á–∫–æ–≤`;
			})

			.join('\n');

		ctx.reply(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${leaderboard}`);

		gameEndMessageSent = true;
		isGameActive = false;

		return true;
	}

	return false;
}

bot.on('message:text', ctx => {
	const userId = ctx.from.id;
	const city = ctx.message.text.trim().toLowerCase();

	if (!isGameActive || !activePlayers.has(userId)) {
		return;
	}

	if (joinPhase) {
		if (!notifiedPlayers.has(userId)) {
			ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–∞–∑—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤');
			notifiedPlayers.add(userId);
		}
		return;
	}

	if (playerScores[userId === undefined]) {
		playerScores[userId] = 0;
	}

	if (!cityExists(city)) {
		ctx.reply('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π');
		return;
	}

	if (currentCity) {
		const lastLetter = getLastSignificantLetter(currentCity);
		if (city[0] !== lastLetter) {
			ctx.reply(
				`–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É "${currentCity[
					currentCity.length - 1
				].toUpperCase()}"`
			);
			return;
		}
	}

	if (usedCities.has(city)) {
		ctx.reply('–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π');
		return;
	}

	userInfo[userId] = ctx.from.username || ctx.from.first_name;
	playerScores[userId] = (playerScores[userId] || 0) + 1;
	const currentScore = playerScores[userId];

	if (isGameActive && checkGameEnd(ctx)) {
		return;
	}

	const nextLetter = getLastSignificantLetter(city);
	usedCities.add(city);
	currentCity = city;
	ctx.reply(
		`–û—Ç–ª–∏—á–Ω–æ! +1 –æ—á–∫–æ. –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${currentScore}. –¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É "${nextLetter.toUpperCase()}"`
	);
});

bot.start();
keep_alive();
