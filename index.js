require('dotenv').config();
const { Bot, session } = require('grammy');
const DataCities = require('./cities.json').city;
const { createGameSession } = require('./gamesession');
const keep_alive = require('./keep_alive');

const bot = new Bot(process.env.BOT_TOKEN);

const gameStore = new Map();
const cityNames = new Set(DataCities.map(city => city.name.toLowerCase()));

bot.use(
	session({
		initial: () => ({ gameSession: null }),
		getSessionKey: ctx => ctx.chat?.id.toString(),
	})
);

bot.command('help', ctx => {
	const helpMessage = `
	–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ì–æ—Ä–æ–¥–∞" üåÉ!

	–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üîó:
	/start -- –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.
	/join -- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.
	/help -- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	/leave -- –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É –≤–æ –≤—Ä–µ–º—è —Ñ–∞–∑—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

	–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã ‚òïÔ∏è:
	1. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞.
	2. –ù–µ–ª—å–∑—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –Ω–∞–∑–≤–∞–Ω—ã.
	3. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ -- 999 (–ö–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞—é —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–º).
	4. –ù–∞–∑—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞.

	–£–¥–∞—á–∏ –∏ –≤–µ—Å–µ–ª–æ–π –∏–≥—Ä—ã! üç™`;

	ctx.reply(helpMessage);
});

bot.command('start', ctx => {
	ctx.reply(
		'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ì–æ—Ä–æ–¥–∞"! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'
	);
});

function startGame(ctx) {
	const game = ctx.session.gameSession;
	if (game.updateInterval) clearInterval(game.updateInterval);
	game.gameStarted = true;
	ctx.reply('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–¥–∞—á–∏!');
	resetInactivityTimer(ctx);
}

bot.command('join', ctx => {
	const chatId = ctx.chat.id;

	if (!ctx.session.gameSession) {
		ctx.session.gameSession = createGameSession();
	}

	const game = ctx.session.gameSession;

	if (game.gameStarted) {
		return ctx.reply('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã.');
	}

	const playerName = ctx.from.first_name;

	if (!game.players.includes(playerName)) {
		game.players.push(playerName);
		game.scores[playerName] = 0;
	}

	if (!game.joinTimer) {
		game.joinStartTime = Date.now();
		game.joinTimer = setTimeout(() => startGame(ctx), game.joinDuration);
		updateJoinMessage(ctx);
	}
});

bot.command('leave', ctx => {
	const game = ctx.session.gameSession;

	if (!game || game.gameStarted) {
		return ctx.reply(
			'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∏–≥—Ä—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏.'
		);
	}

	const playerName = ctx.from.first_name;
	const playerIndex = game.players.indexOf(playerName);

	if (playerIndex === -1) {
		return ctx.reply('–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ.');
	}

	game.players.splice(playerIndex, 1);
	delete game.scores[playerName];

	ctx.reply(`${playerName} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã.`);

	if (game.players.length === 0) {
		clearTimeout(game.joinTimer);
		ctx.session.gameSession = null;
		return ctx.reply('–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
	}

	updateJoinMessage(ctx);
});

function updateJoinMessage(ctx) {
	const game = ctx.session.gameSession;
	const elapsedTime = Date.now() - game.joinStartTime;
	const remainingTime = Math.max(
		0,
		Math.ceil((game.joinDuration - elapsedTime) / 1000)
	);

	ctx
		.reply(
			`–ò–≥—Ä–æ–∫–∏: ${game.players.join(
				', '
			)}\n–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${remainingTime} —Å–µ–∫.`
		)
		.then(message => {
			if (game.updateInterval) clearInterval(game.updateInterval);
			game.updateInterval = setInterval(() => {
				const newElapsedTime = Date.now() - game.joinStartTime;
				const newRemainingTime = Math.max(
					0,
					Math.ceil((game.joinDuration - newElapsedTime) / 1000)
				);

				if (newRemainingTime <= 0) {
					clearInterval(game.updateInterval);
					return;
				}

				ctx.api.editMessageText(
					ctx.chat.id,
					message.message_id,
					`–ò–≥—Ä–æ–∫–∏: ${game.players.join(
						', '
					)}\n–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${newRemainingTime} —Å–µ–∫.`
				);
			}, 3000);
		});
}

bot.on('message', ctx => {
	const game = ctx.session.gameSession;

	if (!game || !game.gameStarted) return;

	const playerName = ctx.from.first_name;

	if (!game.players.includes(playerName)) return;

	const city = ctx.message.text.trim().toLowerCase();

	if (!isValidCity(city, game)) {
		return ctx.reply(
			'–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
		);
	}

	resetInactivityTimer(ctx);

	game.usedCities.add(city);
	game.lastCity = city;
	game.scores[playerName]++;

	if (game.scores[playerName] >= 999) {
		return endGame(ctx);
	}

	ctx.reply(
		`–û—Ç–ª–∏—á–Ω–æ, ${playerName} +1 –æ—á–∫–æ.\n–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${
			game.scores[playerName]
		}! –°–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É "${getLastLetter(city).toUpperCase()}".`
	);
});

function resetInactivityTimer(ctx) {
	const game = ctx.session.gameSession;

	if (game.inactivityTimer) clearTimeout(game.inactivityTimer);

	game.inactivityTimer = setTimeout(
		() => endGame(ctx, true),
		game.inactivityDuration
	);
}

function isValidCity(city, game) {
	if (game.usedCities.has(city)) return false;
	if (game.lastCity && getLastLetter(game.lastCity) !== city[0]) return false;

	return cityNames.has(city);
}

function getLastLetter(city) {
	const lastChar = city.slice(-1);

	return ['—å', '—ä', '—ã'].includes(lastChar) ? city[city.length - 2] : lastChar;
}

function getPointsWord(points) {
	if (points === 1) return '–æ—á–∫–æ';
	if (points >= 2 && points <= 4) return '–æ—á–∫–∞';
	return '–æ—á–∫–æ–≤';
}

function endGame(ctx, inactivity = false) {
	const game = ctx.session.gameSession;
	if (game.inactivityTimer) clearTimeout(game.inactivityTimer);

	const leaderboard = Object.entries(game.scores)
		.sort(([, a], [, b]) => b - a)
		.map(
			([name, score], index) =>
				`${index + 1}. ${name}: ${score} ${getPointsWord(score)}`
		)
		.join('\n');

	const endMessage = inactivity
		? '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n'
		: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n';

	ctx.reply(`${endMessage} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${leaderboard}`);
	ctx.session.gameSession = null;
}

bot.start();
